name: CI - SonarCloud Quality Check with Report

on:
  push:
    branches:
      - sonar

concurrency:
  group: sonar-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write  # Required to push revert commit

jobs:
  sonar-quality-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      # Step 2: Get changed PHP/JS files since last push
      - name: Get changed PHP/JS files since last push
        id: changed
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
            | grep -E '\.(php|js)$' \
            | grep -v '^$' \
            | while read file; do
                if [ -f "$file" ]; then echo "$file"; fi
              done \
            | paste -sd, -)

          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      # Step 3: Run SonarCloud Scan (always wait for quality gate)
      - name: SonarCloud Scan
        if: steps.changed.outputs.files != ''
        uses: SonarSource/sonarqube-scan-action@v5
        continue-on-error: true   # <-- donâ€™t fail here, let us capture report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          FILES: ${{ steps.changed.outputs.files }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=sourabhtailor_sonar-report
            -Dsonar.organization=sourabhtailor
            -Dsonar.sources=.
            -Dsonar.projectVersion=v1.0.${{ github.run_number }}
            -Dsonar.inclusions=${{ env.FILES }}
            -Dsonar.qualitygate.wait=true

      # Step 4: Check Quality Gate status
      - name: Check SonarCloud Quality Gate
        if: steps.changed.outputs.files != ''
        id: qualitygate
        run: |
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=sourabhtailor_sonar-report&branch=sonar" \
            | jq -r '.projectStatus.status')
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Quality Gate status: $STATUS"

      # Step 5: Generate grouped Sonar Report (if failed)
      - name: Generate Sonar Report (if failed)
        if: steps.qualitygate.outputs.status == 'ERROR'
        run: |
          echo " SonarCloud Quality Gate Failed" > sonar-report.md
          echo "" >> sonar-report.md
      
          CHANGED_FILES="${{ steps.changed.outputs.files }}"
          IFS=',' read -ra FILES <<< "$CHANGED_FILES"
      
          # Group issues by type
          for TYPE in VULNERABILITY BUG CODE_SMELL SECURITY_HOTSPOT; do
            case $TYPE in
              VULNERABILITY) HEADER="### Security Issues (Vulnerabilities)" ;;
              BUG) HEADER="### Bugs" ;;
              CODE_SMELL) HEADER="### Code Smells" ;;
              SECURITY_HOTSPOT) HEADER="### Security Hotspots (Review Needed)" ;;
            esac
          
            echo "$HEADER" >> sonar-report.md
          
            if [ "$TYPE" = "SECURITY_HOTSPOT" ]; then
              ISSUES_JSON=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/hotspots/search?projectKey=sourabhtailor_devbranch&branch=dev")
              for FILE in "${FILES[@]}"; do
                echo "$ISSUES_JSON" \
                  | jq -r --arg FILE "$FILE" '.hotspots[] | select(.component | endswith($FILE)) | "- \(.message) [\(.component):\(.line // "N/A")] (Status: \(.status))"' \
                  >> sonar-report.md
              done
            else
              ISSUES_JSON=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                "https://sonarcloud.io/api/issues/search?componentKeys=sourabhtailor_devbranch&branch=dev&types=$TYPE&ps=500")
              for FILE in "${FILES[@]}"; do
                echo "$ISSUES_JSON" \
                  | jq -r --arg FILE "$FILE" '.issues[] | select(.component | endswith($FILE)) | "- \(.rule): \(.message) [\(.component):\(.line // "N/A")]"' \
                  >> sonar-report.md
              done
            fi
          
            echo "" >> sonar-report.md
          done

      
          echo "### Key Metrics" >> sonar-report.md
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=sourabhtailor_sonar-report&branch=sonar&metricKeys=bugs,vulnerabilities,code_smells,security_hotspots,security_hotspots_reviewed,coverage,duplicated_lines_density" \
            | jq -r '.component.measures[] | "- \(.metric): \(.value)"' \
            >> sonar-report.md



      # Step 6: Upload report as artifact
      - uses: actions/upload-artifact@v4
        if: steps.qualitygate.outputs.status == 'ERROR'
        with:
          name: sonar-failed-report-${{ github.sha }}
          path: sonar-report.md

      # Step 7: Explicitly fail if Quality Gate failed
      - name: Fail pipeline if Sonar failed
        if: steps.qualitygate.outputs.status == 'ERROR'
        run: exit 1
